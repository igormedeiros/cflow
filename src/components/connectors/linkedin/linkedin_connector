# File: linkedin_connector.py
import os
from typing import Optional, Dict, Any
import requests
from requests.auth import HTTPBasicAuth
from core.connector_base import ConnectorBase
from core.logger import log

class LinkedInConnector(ConnectorBase):
    def __init__(
            self,
            name: str = "LinkedInConnector",
            description: Optional[str] = None,
            client_id: Optional[str] = None,
            client_secret: Optional[str] = None,
            redirect_uri: Optional[str] = None,
            access_token: Optional[str] = None,
            refresh_token: Optional[str] = None,
            retry_attempts: int = 3,
            timeout: int = 30,
            enable_retry: bool = True
    ):
        super().__init__(
            name=name,
            description=description or "Connector for LinkedIn API integration",
            retry_attempts=retry_attempts,
            timeout=timeout,
            enable_retry=enable_retry
        )
        self.client_id = client_id or os.getenv('LINKEDIN_CLIENT_ID')
        self.client_secret = client_secret or os.getenv('LINKEDIN_CLIENT_SECRET')
        self.redirect_uri = redirect_uri or os.getenv('LINKEDIN_REDIRECT_URI')
        self.access_token = access_token or os.getenv('LINKEDIN_ACCESS_TOKEN')
        self.refresh_token = refresh_token or os.getenv('LINKEDIN_REFRESH_TOKEN')
        self.base_url = "https://api.linkedin.com/v2"
        self.auth_url = "https://www.linkedin.com/oauth/v2"

    def connect(self, **kwargs) -> None:
        try:
            self.pre_connect_hook(kwargs)
            self._validate_credentials()

            if self.validate_connection():
                self.connected = True
                log.info("Successfully connected to LinkedIn API")
                self.post_connect_hook()
            else:
                raise ConnectionError("Failed to validate LinkedIn connection")

        except Exception as e:
            self._handle_exception(e, "Failed to connect to LinkedIn")
            raise

    def _validate_credentials(self):
        if not all([self.client_id, self.client_secret, self.redirect_uri]):
            raise ValueError("Missing LinkedIn API credentials")

    def validate_connection(self) -> bool:
        try:
            # Test connection by fetching authenticated user profile
            url = f"{self.base_url}/me"
            headers = {"Authorization": f"Bearer {self.access_token}"}
            response = requests.get(url, headers=headers, timeout=self.timeout)
            return response.status_code == 200
        except Exception as e:
            self._handle_exception(e, "LinkedIn connection validation failed")
            return False

    def refresh_access_token(self) -> bool:
        """Refresh the access token using the refresh token."""
        try:
            url = f"{self.auth_url}/accessToken"
            data = {
                "grant_type": "refresh_token",
                "refresh_token": self.refresh_token,
                "client_id": self.client_id,
                "client_secret": self.client_secret
            }
            response = requests.post(url, data=data, timeout=self.timeout)
            response.raise_for_status()
            tokens = response.json()
            self.access_token = tokens.get("access_token")
            self.refresh_token = tokens.get("refresh_token")
            log.info("Successfully refreshed LinkedIn access token")
            return True
        except Exception as e:
            self._handle_exception(e, "Failed to refresh LinkedIn access token")
            return False

    def post_update(self, author_urn: str, text: str) -> bool:
        """Post an update to LinkedIn."""
        if not self.connected:
            raise ConnectionError("Not connected to LinkedIn API")

        try:
            url = f"{self.base_url}/ugcPosts"
            headers = {
                "Authorization": f"Bearer {self.access_token}",
                "Content-Type": "application/json"
            }
            payload = {
                "author": author_urn,
                "lifecycleState": "PUBLISHED",
                "specificContent": {
                    "com.linkedin.ugc.ShareContent": {
                        "shareCommentary": {"text": text},
                        "shareMediaCategory": "NONE"
                    }
                },
                "visibility": {"com.linkedin.ugc.MemberNetworkVisibility": "PUBLIC"}
            }

            response = requests.post(url, json=payload, headers=headers, timeout=self.timeout)
            response.raise_for_status()
            log.info(f"Successfully posted update to LinkedIn: {text}")
            return True
        except Exception as e:
            self._handle_exception(e, "Failed to post update to LinkedIn")
            return False

    def disconnect(self) -> None:
        """Disconnect the LinkedIn API by resetting the access token."""
        try:
            log.info("Disconnecting from LinkedIn API")
            self.connected = False
            self.access_token = None
        except Exception as e:
            self._handle_exception(e, "Error during LinkedIn disconnection")
            raise
