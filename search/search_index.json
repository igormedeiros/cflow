{"config":{"lang":["pt"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Fluxr - Task Automation Framework","text":"<p>Fluxr \u00e9 um framework Python para automa\u00e7\u00e3o de workflow e integra\u00e7\u00e3o entre diferentes ferramentas e APIs. Permite que desenvolvedores definam pipelines de dados personalizados usando triggers, conectores, ferramentas e tarefas modulares para orquestrar workflows.</p>"},{"location":"#estrutura-do-projeto","title":"Estrutura do Projeto","text":"<pre><code>fluxr/\n\u251c\u2500\u2500 connectors/    # Conectores para diferentes fontes de dados/APIs\n\u251c\u2500\u2500 tools/         # Ferramentas reutiliz\u00e1veis\n\u251c\u2500\u2500 tasks/         # Tarefas que combinam conectores e ferramentas\n\u2514\u2500\u2500 flux.py        # Defini\u00e7\u00e3o do workflow\n</code></pre>"},{"location":"#recursos-principais","title":"Recursos Principais","text":"<p>Modularidade: Conectores, ferramentas e tarefas s\u00e3o componentes modulares que podem ser combinados Execution Hooks: Adicione comportamentos personalizados antes e depois das execu\u00e7\u00f5es Resili\u00eancia: Implementa\u00e7\u00e3o de mecanismos de retry (com exponential backoff) para conectores Monitoramento e Logging: Logging detalhado e monitoramento de m\u00e9tricas do workflow Estados do Workflow: O workflow gerencia seu pr\u00f3prio ciclo de vida</p>"},{"location":"#exemplo-rapido","title":"Exemplo R\u00e1pido","text":"<pre><code>from fluxr.flux import Flux\nfrom fluxr.connectors.excel import ExcelConnector\nfrom fluxr.connectors.telegram import TelegramConnector\nfrom fluxr.tasks import ExcelToTelegramTask\n\ndef main():\n    # Configurando conectores\n    excel = ExcelConnector(name=\"Excel\", file_path=\"data.xlsx\")\n    telegram = TelegramConnector(name=\"Telegram\", token=\"BOT_TOKEN\")\n\n    # Criando uma tarefa\n    task = ExcelToTelegramTask(\n        name=\"Excel to Telegram\",\n        connectors=[excel, telegram]\n    )\n\n    # Configurando o workflow\n    workflow = Flux(\n        name=\"Data Pipeline\",\n        connectors=[excel, telegram],\n        tasks=[task]\n    )\n\n    # Executando\n    workflow.run()\n</code></pre>"},{"location":"components/connectors/","title":"Connectors","text":"<p><code>docs/components/connectors.md</code>: ```markdown</p>"},{"location":"components/connectors/#conectores","title":"Conectores","text":"<p>Os conectores s\u00e3o respons\u00e1veis pela integra\u00e7\u00e3o com diferentes fontes de dados e servi\u00e7os.</p>"},{"location":"components/connectors/#excel-connector","title":"Excel Connector","text":"<p>O Excel Connector permite ler e escrever dados em arquivos Excel.</p>"},{"location":"components/connectors/#telegram-connector","title":"Telegram Connector","text":"<p>O Telegram Connector permite enviar mensagens para chats do Telegram.</p>"},{"location":"components/flux/","title":"Flux","text":"<p>O Flux \u00e9 o componente central que gerencia o workflow e a execu\u00e7\u00e3o das tasks.</p>"},{"location":"components/tasks/","title":"Tasks","text":"<p>As tasks s\u00e3o unidades de trabalho que combinam conectores e ferramentas.</p>"},{"location":"components/tools/","title":"Tools","text":"<p>Ferramentas s\u00e3o componentes reutiliz\u00e1veis que fornecem funcionalidades espec\u00edficas.</p>"},{"location":"guide/examples/","title":"Exemplos","text":"<p><code>docs/guide/examples.md</code>: ```markdown</p>"},{"location":"guide/examples/#exemplos","title":"Exemplos","text":""},{"location":"guide/examples/#exemplo-excel-para-telegram","title":"Exemplo: Excel para Telegram","text":"<p>Este exemplo demonstra como ler dados de um arquivo Excel e enviar para um chat do Telegram.</p> <p>```python</p>"},{"location":"guide/examples/#exemplo-completo-aqui","title":"Exemplo completo aqui","text":""},{"location":"guide/getting-started/","title":"Primeiros Passos","text":"<p><code>docs/guide/getting-started.md</code>: ```markdown</p>"},{"location":"guide/getting-started/#primeiros-passos","title":"Primeiros Passos","text":""},{"location":"guide/getting-started/#configuracao-basica","title":"Configura\u00e7\u00e3o B\u00e1sica","text":"<p>```python from fluxr.flux import Flux from fluxr.connectors.excel import ExcelConnector from fluxr.connectors.telegram import TelegramConnector</p>"},{"location":"guide/getting-started/#configuracao-dos-conectores","title":"Configura\u00e7\u00e3o dos conectores","text":"<p>excel = ExcelConnector(name=\"Excel\", file_path=\"data.xlsx\") telegram = TelegramConnector(name=\"Telegram\", token=\"BOT_TOKEN\")</p>"},{"location":"guide/getting-started/#criacao-do-workflow","title":"Cria\u00e7\u00e3o do workflow","text":"<p>workflow = Flux(     name=\"Meu Primeiro Workflow\",     connectors=[excel, telegram] )</p>"},{"location":"guide/installation/","title":"Instala\u00e7\u00e3o","text":""},{"location":"guide/installation/#requisitos","title":"Requisitos","text":"<ul> <li>Python 3.10+</li> <li>Poetry</li> </ul>"},{"location":"guide/installation/#instalacao-via-poetry","title":"Instala\u00e7\u00e3o via Poetry","text":"<p>```bash</p>"},{"location":"guide/installation/#clone-o-repositorio","title":"Clone o reposit\u00f3rio","text":"<p>git clone https://github.com/igormedeiros/fluxr cd fluxr</p>"},{"location":"guide/installation/#instale-as-dependencias","title":"Instale as depend\u00eancias","text":"<p>poetry install</p>"}]}